#!/usr/bin/perl

# Be smart
use strict;
use warnings;

# Libraries
use Data::Dumper;
use JSON::Tiny qw(decode_json);

# Options
my $opt_part = 0;
my $opt_map  = undef;

# Data gathered
my (@lines, @temps);
my $maxlen = 0;
our @serial_to_physical;

# Main
parse_cmdline();
gather_data();
read_map() if ($opt_map);
print_report();
print_map() if ($opt_map);
exit 0;

sub parse_cmdline {
    for(my $i = 0; $i <= $#ARGV; $i++) {
        $_ = $ARGV[$i];
        if ( /^--part$/ or /^-p$/ ) {
            $opt_part = 1;
        } elsif ( /^--help$/ or /^-h$/ ) {
            print_usage();
        } elsif ( /^--map$/ or /^-m$/ ) {
            $opt_map = $ARGV[++$i];
        } else {
            print "ERROR: unknown option: $_\n";
            exit 1;
        }
    }
}

sub print_usage {
    print <<EOF
usage: $0 [OPTIONS]

Options:
  -h [--help]                 - print this usage message
  -p [--part]                 - show partitions
  -m [--map] <serial_map>     - print data in a grid
EOF
    ;
    exit 1;
}

sub read_map {
    require $opt_map;
}

sub print_map {
    my($rows) = scalar(@serial_to_physical);
    my($cols) = scalar(@{ $serial_to_physical[0] });
    
    my $col_w = 20;
    print "=" x ($cols * $col_w) . "\n";

    for(my $row = 0; $row <= $#serial_to_physical; $row++) {
        my @row = @{ $serial_to_physical[$row] };
        for(my $col = 0; $col <= $#row; $col++) {
            print "row = $row, $col=$col: $row[$col]\n";
        }
    }
    print "=" x ($cols * $col_w) . "\n";
}

sub gather_data {
    my $header = 1;

    my $cmd = "lsblk -o PATH,MAJ:MIN,RM,SIZE,MOUNTPOINT,MODEL,SERIAL,TRAN -e 230";
    if (not $opt_part) {
        $cmd .= " -d";
    }
    open FIN, "$cmd|" or die "can't execute: $cmd";
    while(<FIN>) {
        chomp;
        push(@lines, $_);

        if ($header) {
            $header = 0;
            push(@temps, "TEMP");
        } else {
            $maxlen = length($_) if (length($_) > $maxlen);
            if ( /^(\S+)/ ) {
                push(@temps, &get_temp($1));
            } else {
                print "ERROR: parsing problem with lsblk\n";
                print "  cmd = $cmd\n";
                print "  lines =\n";
                foreach(@lines) {
                    print "'$_'\n";
                }
                exit 1;
            }
        }
    }
    close FIN;
}

sub print_report {
    for(my $i = 0; $i <= $#lines; $i++) {
        printf "%-${maxlen}s $temps[$i]\n", $lines[$i];
    }
}

sub get_temp {
    my($dev) = @_;
    my $temp = "";

    my $cmd = "smartctl --json -A $dev";
    open FIN2, "$cmd|" or die "Can't execute $cmd\n";
    my $json = "";
    while(<FIN2>) {
        chomp;
        $json .= $_;
    }
    close FIN2;

    my $data = decode_json($json);
    #print Dumper($data);
    if (exists $data->{temperature}) {
        #print Dumper($data->{temperature});
        if (exists $data->{temperature}->{current}) {
            #print Dumper($data->{temperature}->{current});
            $temp = $data->{temperature}->{current};
        }
    }

    return $temp;
}
